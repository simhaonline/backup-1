name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image
    branches:
      - master

    # Publish all tags as releases
    tags:
      - +

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: backup

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "$GITHUB_REF" | sed -e 's,.*/\(.*\),\1,')

          docker build . --file Dockerfile --build-arg APP_VERSION=$VERSION

  # Push image to GitHub Packages
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "$GITHUB_REF" | sed -e 's,.*/\(.*\),\1,')

          docker build . --file Dockerfile --tag $IMAGE_NAME --build-arg APP_VERSION=$VERSION

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/$GITHUB_REPOSITORY/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "$GITHUB_REF" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
